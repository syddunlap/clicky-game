{"version":3,"sources":["components/Wrapper/index.js","components/NavBar/index.js","components/Card/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","NavBar","href","id","message","score","topScore","Card","role","style","backgroundImage","concat","url","alt","onClick","Footer","App","state","clicked","images","startGame","key","_this","includes","setState","sort","Math","random","document","getElementById","classList","add","Object","toConsumableArray","getElementsByClassName","map","element","setTimeout","remove","_this2","this","components_NavBar","react_router_dom","basename","components_Wrapper","i","components_Card","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c65870b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nexport function NavBar(props) {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark d-flex justify-content-around\">\n      <a className=\"navbar-brand\" href=\"/clicky-game/\">Clicky Game!</a>\n      <span className=\"navbar-text\" id=\"message\">{props.message}</span>\n      <span className=\"navbar-text\">Score: {props.score} | Top Score: {props.topScore}</span>\n    </nav>\n  )\n}\n\nexport default NavBar;","import React from \"react\";\nimport \"./style.css\";\n\nexport function Card(props) {\n  return (\n    <div \n      role=\"img\" \n      className=\"card img-thumbnail m-4\" \n      style={{ backgroundImage : `url(${props.url})` }} \n      alt=\"Character Image\" \n      onClick={props.onClick}\n    >\n    </div>\n  );\n}\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nexport function Footer() {\n    return (\n        <footer className=\"footer\">\n            <div className=\"container\">\n                <p>Â© 2019 Sydney Dunlap</p>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport NavBar from \"./components/NavBar\";\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport { BrowserRouter } from 'react-router-dom';\n\nclass App extends Component {\n  state = {\n    score: 0,\n    message: \"Click an image to begin!\",\n    topScore: 0,\n    clicked: [],\n    images: [\n      \"./assets/images/rick.jpg\",\n      \"./assets/images/morty.jpg\",\n      \"./assets/images/beth.jpg\",\n      \"./assets/images/jerry.jpg\",\n      \"./assets/images/summer.jpg\",\n      \"./assets/images/evil-morty.JPG\",\n      \"./assets/images/mr-meeseks.jpg\",\n      \"./assets/images/Scaryterryrm.png\",\n      \"./assets/images/squanchy.jpg\",\n      \"./assets/images/mr-poopy-butthole.jpeg\",\n      \"./assets/images/noob-noob.jpg\",\n      \"./assets/images/ants-in-my-eyes-johnson.jpg\",\n    ]\n  }\n\n  startGame = (key) => {\n    if(this.state.clicked.includes(key)) {\n      this.setState({\n        score: 0,\n        clicked: [],\n        message: \"ALREADY CLICKED THAT ONE!\",\n        images: this.state.images.sort(() => 0.5 - Math.random())\n      });\n      document.getElementById(\"message\").classList.add(\"text-danger\");\n      [...document.getElementsByClassName(\"card\")].map((element) => element.classList.add(\"shake\"));\n      setTimeout(() => {\n        document.getElementById(\"message\").classList.remove(\"text-danger\");\n        [...document.getElementsByClassName(\"card\")].map((element) => element.classList.remove(\"shake\"));\n      }, 500);\n    }\n    else {\n      this.setState({\n        score: this.state.score + 1,\n        clicked: [...this.state.clicked, key],\n        message: \"You guessed correctly!\",\n        topScore: this.state.score + 1 > this.state.topScore ? this.state.score + 1 : this.state.topScore,\n        images: this.state.images.sort(() => 0.5 - Math.random())\n      });\n      document.getElementById(\"message\").classList.add(\"text-success\");\n      setTimeout(() => {\n        document.getElementById(\"message\").classList.remove(\"text-success\");\n      }, 500);\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <NavBar\n          message={this.state.message}\n          score={this.state.score}\n          topScore={this.state.topScore}>\n        </NavBar>\n        <BrowserRouter basename=\"/clicky-game/\" />\n        <Wrapper>\n        <div className=\"container d-flex flex-row flex-wrap mx-auto justify-content-center my-5\">\n          {this.state.images.map((url, i) => (\n            <Card \n              key={i} \n              url={url} \n              onClick={() => this.startGame(url)} \n            />\n          ))}\n        </div>\n        </Wrapper>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}